---
- name: Obtain Modsecurity source code for branch v3/master
  git:
    repo: "https://github.com/SpiderLabs/ModSecurity"
    dest: "~/ModSecurity"
    depth: 1
    version: "v3/master"
    force: yes

- name: Init submodules, configure, build, make install
  command: "{{ item }}"
  args:
    chdir: "~/ModSecurity"
    creates: "/usr/local/modsecurity/lib/libmodsecurity.so"
  with_items:
    - "git submodule init"
    - "git submodule update"
    - "./build.sh"
    - "./configure"
    - "make"
    - "make install"

- name: Obtain Modsecurity-nginx source code
  git:
    repo: "https://github.com/SpiderLabs/ModSecurity-nginx"
    dest: "~/ModSecurity-nginx"
    depth: 1
    force: yes

- name: Download Nginx source code
  get_url:
    url: "https://nginx.org/download/nginx-{{ nginx_modsec3_crs3_nginx_version }}.tar.gz"
    dest: "/tmp/nginx-{{ nginx_modsec3_crs3_nginx_version }}.tar.gz"

- name: Create folder for Nginx source code
  file:
    path: "~/Nginx"
    state: directory

- name: Extract Nginx source code
  unarchive:
    src: "/tmp/nginx-{{ nginx_modsec3_crs3_nginx_version }}.tar.gz"
    dest: "~/Nginx"
    remote_src: yes

- name: Get configure arguments
  shell:  "nginx -V  2>&1 | awk -F ':' '/configure arguments/{print $2}'"
  register: result
  changed_when: no

- name: Configure and make ModSecurity3 for Nginx module
  shell: "{{ item }}"
  args:
    chdir: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}"
    creates: "~/mods.so"
  with_items:
    # Latest version had troubles parsing the entire configure arguments so trying just with --with-compat
    #- "CFLAGS=-Wno-error ./configure {{ result.stdout }} --add-dynamic-module=../../ModSecurity-nginx"
    - "CFLAGS=-Wno-error ./configure --with-compat --add-dynamic-module=../../ModSecurity-nginx"
    - "make modules"

- name: Copy Modsecurity-nginx module to Nginx modules folder
  copy:
    src: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}/objs/ngx_http_modsecurity_module.so"
    dest: "{{ modsecurity.prefix.nginx_modules }}"
    remote_src: yes

- name: Create folder for Modsec config and rules
  file:
    path: "{{ nginx.prefix.config }}/modsec"
    state: directory

- name: Copy recommended conf to become modsecurity.conf
  copy:
    src: "~/ModSecurity/modsecurity.conf-recommended"
    dest: "{{ nginx.prefix.config }}/modsec/modsecurity.conf"
    remote_src: yes

- name: Copy unicode.mapping file also
  copy:
    src: "~/ModSecurity/unicode.mapping"
    dest: "{{ nginx.prefix.config }}/modsec/unicode.mapping"
    remote_src: yes

- name: Activate blocking rather than detection only
  replace:
    path: "{{ nginx.prefix.config }}/modsec/modsecurity.conf"
    regexp: "SecRuleEngine DetectionOnly"
    replace: "SecRuleEngine On"

- name: Create a main.conf from template
  template:
    src: main.conf.j2
    dest: "{{ nginx.prefix.config }}/modsec/main.conf"

- name: Obtain OWASP Modsecurity Rules
  git:
    repo: "https://github.com/coreruleset/coreruleset"
    dest: "{{ nginx.prefix.config }}/modsec/owasp-modsecurity-crs"
    version: "v3.4/dev"

- name: Copy crs-setup.conf.example to become crs-setup.conf
  copy:
    src: "{{ nginx.prefix.config }}/modsec/owasp-modsecurity-crs/crs-setup.conf.example"
    dest: "{{ nginx.prefix.config }}/modsec/owasp-modsecurity-crs/crs-setup.conf"
    remote_src: yes
